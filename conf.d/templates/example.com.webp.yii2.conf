server {
  listen [::]:443 ssl http2;
  listen 443 ssl http2;

  # The host name to respond to
  server_name example.com;
  set $certname = "example.com/example.com";


  include h5bp/ssl/ssl_engine.conf;
  #cant use variable in cert paths
   ssl_certificate /var/www/keys/example.com/example.com.crt;
   ssl_certificate_key /etc/nginx/certs/default.key;

   #include h5bp/ssl/certificate_files.conf;
  include h5bp/ssl/policy_intermediate.conf;

  # Path for static files
  set $root_path "/var/www/example.com/web";
  root $root_path;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }
       include h5bp/location/security_file_access.conf;
       include h5bp/location/web_performance_filename-based_cache_busting.conf;
       include h5bp/location/web_performance_svgz-compression.conf;
       include h5bp/location/webp.conf;
       include h5bp/location/php.conf;

      # Custom error pages
      include h5bp/errors/custom_errors.conf;

      # Include the basic h5bp config set
      include h5bp/basic.conf;


}





#redirect https www to normal
server {
  listen [::]:443 ssl http2;
  listen 443 ssl http2;

  server_name www.example.com;

  include h5bp/ssl/ssl_engine.conf;
  include h5bp/ssl/certificate_files.conf;
  include h5bp/ssl/policy_intermediate.conf;

  return 301 $scheme://example.com$request_uri;
}

#redirect http to https
server {
    listen [::]:80;
    listen 80;
    server_name www.example.com;
    return 301 https://example.com$request_uri;
}

server {
    listen [::]:80;
    listen 80;
    server_name example.com;
    return 301 https://example.com$request_uri;
}